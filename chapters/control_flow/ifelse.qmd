# If / Else / Where  {.unnumbered}


**Instance of**: operation of control flow

**AKA**: 

**Distinct from**: 

**English**: 

**Formalization**:

$$ 
$$

**Cites**: [Wikipedia](https://en.wikipedia.org/wiki/Conditional_(computer_programming)) ; [Wikidata]() ; [Wolfram]()

**Code**

::: panel-tabset

### R
[ifelse: Conditional Element Selection](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/ifelse)

Examples:

```{r}
if(TRUE){
  "A"
} else {
  "B"
}
  
ifelse(TRUE, "A", "B" )
```


### Python

[if and if else](https://chrisalbon.com/code/python/basics/if_and_if_else_statements/)

Examples:

Note do not use & or you will get a different result

```{python}

if True:
  print("A")
else:
  print("B")


```

```{python}

if False:
  print("1")
elif True:
  print("2")
else:
  print("3")

```


### Numpy

[numpy.where](https://numpy.org/doc/stable/reference/generated/numpy.where.html)
You can use np.where masks as a kind of vectorized if else statement, choosing between elements from either A or B

Examples:

```{python}

import numpy as np
x=np.array(True) #
np.where(x , "A", "B")

```

### Jax

[]()

The first option in jax is to use where statements as in the numpy example

```{python}

import jax.numpy as jnp
x=jnp.array(True) #
#TypeError: Value 'A' with dtype <U1 is not a valid JAX array type. Only arrays of numeric types are supported by JAX.
jnp.where(x , 1, 2) #Note jax doesn't allow string types

```

If doing autograd if statements have more constraints.

[Control Flow](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#control-flow)
* In jax, grad works through if statements unconstrained

Examples:

```{python}
import jax.numpy as jnp
a=jnp.array(True)
b=jnp.array(False)
jnp.logical_and(a, b)
```


### SQL
https://www.w3schools.com/sql/sql_operators.asp
https://www.databasestar.com/sql-boolean-data-type/#:~:text=SQL%20Server%20Boolean,TRUE%20and%200%20for%20FALSE.
[]()

```{r}
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)

#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())

```

```{sql, connection=con}
SELECT TRUE AND FALSE;
```
```{sql, connection=con}
SELECT TRUE AND TRUE;
```

### Torch

https://pytorch.org/docs/stable/generated/torch.logical_and.html

```{python}
import torch
a = torch.tensor(True)
b = torch.tensor(False)
torch.logical_and(a, b)

```

:::

### Tensorflow

https://www.tensorflow.org/api_docs/python/tf/math/logical_and

```{python}
import tensorflow as tf
a = tf.constant(True)
b = tf.constant(False)
tf.math.logical_and(a, b)

```
