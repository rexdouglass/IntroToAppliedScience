{
  "hash": "50a1a99cacd463ad7ad069f3287c7a76",
  "result": {
    "markdown": "# And  {.unnumbered}\n\n**Instance of**: logic\n\n**AKA**: \n\n**Distinct from**: \n\n**English**: \n\n**Formalization**:\n\n$$ \n$$\n\n**Cites**: [Wikipedia]() ; [Wikidata]() ; [Wolfram]()\n\n**Code**\n\n::: panel-tabset\n\n### R\n[]()\n\nExamples:\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-1_c3afce9a15bc8fa59356ef0dedbfa676'}\n\n```{.r .cell-code}\na=TRUE\nb=FALSE\na & b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n### Python\n\n[]()\n\nExamples:\n\nNote do not use & or you will get a different result\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-2_e98be1bb24a703ddfa5d3086b29fbf9c'}\n\n```{.python .cell-code}\na=True\nb=False\na and b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\nNote do not use & or you will get a different result\n&' is a bitwise operator in Python that acts on bits and performs bit by bit operation\n\n[https://www.geeksforgeeks.org/difference-between-and-and-in-python/#:~:text=and%20is%20a%20Logical%20AND,otherwise%20True%20when%20using%20logically.](https://www.geeksforgeeks.org/difference-between-and-and-in-python/#:~:text=and%20is%20a%20Logical%20AND,otherwise%20True%20when%20using%20logically.)\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-3_9a1a907b5ea9b2eb0238a2328ec07054'}\n\n```{.python .cell-code}\na=14\nb=4\na & b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n### Numpy\n\n[]()\nhttps://numpy.org/doc/stable/reference/generated/numpy.logical_and.html\n\nExamples:\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-4_337dd06ef652b4c3cdcd534d2c733f81'}\n\n```{.python .cell-code}\nimport numpy as np\na=np.array(True)\nb=np.array(False)\nnp.logical_and(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\n### Jax\n\n[]()\n\nExamples:\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-5_ec047cfaec451e8e878a73511f6dee70'}\n\n```{.python .cell-code}\nimport jax.numpy as jnp\na=jnp.array(True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n```\n:::\n\n```{.python .cell-code}\nb=jnp.array(False)\njnp.logical_and(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray(False, dtype=bool)\n```\n:::\n:::\n\n\n\n### SQL\nhttps://www.w3schools.com/sql/sql_operators.asp\nhttps://www.databasestar.com/sql-boolean-data-type/#:~:text=SQL%20Server%20Boolean,TRUE%20and%200%20for%20FALSE.\n[]()\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-6_79c15b0aa35daff111c3eb39ba3b7230'}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: RPostgres\n```\n:::\n\n```{.r .cell-code}\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n::: {.cell hash='and_cache/html/unnamed-chunk-7_53386ebe67032699684b528e5a8f1ca3'}\n\n```{.sql .cell-code}\nSELECT TRUE AND FALSE;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|?column? |\n|:--------|\n|FALSE    |\n\n</div>\n:::\n\n::: {.cell hash='and_cache/html/unnamed-chunk-8_967977868016f3d8900f6708c1e76bd8'}\n\n```{.sql .cell-code}\nSELECT TRUE AND TRUE;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|?column? |\n|:--------|\n|TRUE     |\n\n</div>\n:::\n\n\n### Torch\n\nhttps://pytorch.org/docs/stable/generated/torch.logical_and.html\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-9_222064043ae6c594b7f3d9d604f5f57c'}\n\n```{.python .cell-code}\nimport torch\na = torch.tensor(True)\nb = torch.tensor(False)\ntorch.logical_and(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor(False)\n```\n:::\n:::\n\n\n:::\n\n### Tensorflow\n\nhttps://www.tensorflow.org/api_docs/python/tf/math/logical_and\n\n\n::: {.cell hash='and_cache/html/unnamed-chunk-10_b55aa6ccbae43ab0d2517be519f14a4b'}\n\n```{.python .cell-code}\nimport tensorflow as tf\na = tf.constant(True)\nb = tf.constant(False)\ntf.math.logical_and(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<tf.Tensor: shape=(), dtype=bool, numpy=False>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}