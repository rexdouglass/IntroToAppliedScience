{
  "hash": "0fa8cffc6ad54aa0ee5e7253272c03ec",
  "result": {
    "markdown": "# If / Else / Where  {.unnumbered}\n\n\n**Instance of**: operation of control flow\n\n**AKA**: \n\n**Distinct from**: \n\n**English**: \n\n**Formalization**:\n\n$$ \n$$\n\n**Cites**: [Wikipedia](https://en.wikipedia.org/wiki/Conditional_(computer_programming)) ; [Wikidata]() ; [Wolfram]()\n\n**Code**\n\n::: panel-tabset\n\n### R\n[ifelse: Conditional Element Selection](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/ifelse)\n\nExamples:\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-1_d005244089226292f22ad3de26530511'}\n\n```{.r .cell-code}\nif(TRUE){\n  \"A\"\n} else {\n  \"B\"\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\"\n```\n:::\n\n```{.r .cell-code}\nifelse(TRUE, \"A\", \"B\" )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\"\n```\n:::\n:::\n\n\n\n### Python\n\n[if and if else](https://chrisalbon.com/code/python/basics/if_and_if_else_statements/)\n\nExamples:\n\nNote do not use & or you will get a different result\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-2_d3dd336dff384d0db26e249ff053e7f7'}\n\n```{.python .cell-code}\n\nif True:\n  print(\"A\")\nelse:\n  print(\"B\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA\n```\n:::\n:::\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-3_d7e8cfa0fe4575009aaaeb3c1eb3313a'}\n\n```{.python .cell-code}\n\nif False:\n  print(\"1\")\nelif True:\n  print(\"2\")\nelse:\n  print(\"3\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n\n### Numpy\n\n[numpy.where](https://numpy.org/doc/stable/reference/generated/numpy.where.html)\nYou can use np.where masks as a kind of vectorized if else statement, choosing between elements from either A or B\n\nExamples:\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-4_a7d33310071d3a3b308dc0b29da07c70'}\n\n```{.python .cell-code}\n\nimport numpy as np\nx=np.array(True) #\nnp.where(x , \"A\", \"B\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray('A', dtype='<U1')\n```\n:::\n:::\n\n\n### Jax\n\n[]()\n\nThe first option in jax is to use where statements as in the numpy example\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-5_6eaec03cd8e75f7852476454d7a76369'}\n\n```{.python .cell-code}\n\nimport jax.numpy as jnp\nx=jnp.array(True) #\n#TypeError: Value 'A' with dtype <U1 is not a valid JAX array type. Only arrays of numeric types are supported by JAX.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n```\n:::\n\n```{.python .cell-code}\njnp.where(x , 1, 2) #Note jax doesn't allow string types\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray(1, dtype=int32, weak_type=True)\n```\n:::\n:::\n\n\nIf doing autograd if statements have more constraints.\n\n[Control Flow](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#control-flow)\n* In jax, grad works through if statements unconstrained\n\nExamples:\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-6_6f00f6b45a1a633ede0093d24b85b61f'}\n\n```{.python .cell-code}\nimport jax.numpy as jnp\na=jnp.array(True)\nb=jnp.array(False)\njnp.logical_and(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray(False, dtype=bool)\n```\n:::\n:::\n\n\n\n### SQL\nhttps://www.w3schools.com/sql/sql_operators.asp\nhttps://www.databasestar.com/sql-boolean-data-type/#:~:text=SQL%20Server%20Boolean,TRUE%20and%200%20for%20FALSE.\n[]()\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-7_5150aff1f729e16b6e08e82d6852077c'}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: RPostgres\n```\n:::\n\n```{.r .cell-code}\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-8_8870ad689171bfad38cfebcfe4888b07'}\n\n```{.sql .cell-code}\nSELECT TRUE AND FALSE;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|?column? |\n|:--------|\n|FALSE    |\n\n</div>\n:::\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-9_67d83300b5853dcdf6741a7f19330b71'}\n\n```{.sql .cell-code}\nSELECT TRUE AND TRUE;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|?column? |\n|:--------|\n|TRUE     |\n\n</div>\n:::\n\n\n### Torch\n\nhttps://pytorch.org/docs/stable/generated/torch.logical_and.html\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-10_7e9e062f84086fcb98d10c4b6ac345b1'}\n\n```{.python .cell-code}\nimport torch\na = torch.tensor(True)\nb = torch.tensor(False)\ntorch.logical_and(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor(False)\n```\n:::\n:::\n\n\n:::\n\n### Tensorflow\n\nhttps://www.tensorflow.org/api_docs/python/tf/math/logical_and\n\n\n::: {.cell hash='ifelse_cache/html/unnamed-chunk-11_c3d88c51ea6d25ff5df1831172ef5d1d'}\n\n```{.python .cell-code}\nimport tensorflow as tf\na = tf.constant(True)\nb = tf.constant(False)\ntf.math.logical_and(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<tf.Tensor: shape=(), dtype=bool, numpy=False>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}