{
  "hash": "23e3b5cf0f501ef150d94d5b358ac893",
  "result": {
    "markdown": "# Filter  {.unnumbered}\n\n**Instance of**: Higher-order function\n\n**AKA**: Subset\n\n**Distinct from**: \n\n**English**: \n\n**Formalization**:\n\n$$ \n$$\n    \n**Cites**: [Wikipedia](https://en.wikipedia.org/wiki/Filter_(higher-order_function)) ; [Wikidata](https://www.wikidata.org/wiki/Q2672873) \n  \n**Code**\n\n\n\n<details>\n<summary>Spin up toy data objects and databases </summary>\n\n::: {.cell}\n\n```{.r .cell-code}\ntoy_vector_numeric <- c(1,2,3,4,5)\ntoy_vector_character <- c('a','b','c','d','e')\ntoy_matrix <- matrix(1:9, nrow=3,ncol=3)\ntoy_list <- list('a','1',T,c('red','green'))\ntoy_df <- data.frame(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(data.table)\ntoy_dt <- data.table(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::between()   masks data.table::between()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::first()     masks data.table::first()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::last()      masks data.table::last()\n✖ purrr::transpose() masks data.table::transpose()\n```\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\ntoy_vector_numeric = np.array([1,2,3,4,5])\ntoy_vector_character = np.array(['a','b','c','d','e'])\ntoy_list = ['a','1',True,['red','green']]\ntoy_dictionary = { 'a':1 , 'b':2, 'c':3}\nimport pandas as pd\ntoy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon_Postgres <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS toy_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS toy_df (\n  id varchar(5),\n\ty INTEGER,\n\tx INTEGER\n);\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO toy_df (id, y, x)\nVALUES\n\t('unit1',1,3),\n\t('unit2',2,2),\n\t('unit3',3,1);\n\t\n```\n:::\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-7_731c282b1a879e4e5ed82e8b0d5a3642'}\n\n```{.r .cell-code}\n#install.packages(\"duckdb\")\nlibrary(\"DBI\")\ncon_duckdb = dbConnect(duckdb::duckdb(), \":memory:\")\n```\n:::\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-8_4c326168e17fa46a90701f77a8810cda'}\n\n```{.python .cell-code}\n#pip install duckdb==0.6.0\nimport duckdb\ncursor_duckdb = duckdb.connect()\n```\n:::\n\n</details>\n\n\n\n## R\n\n#### Base {.unnumbered}\n\n[subset: Subsetting Vectors, Matrices and Data Frames](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/subset)\n  \n\n::: {.cell hash='filter_cache/html/unnamed-chunk-9_ca3568bc533e8038ba16aee86f88a21b'}\n\n```{.r .cell-code}\ntoy_vector_numeric[toy_vector_numeric > 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\ntoy_matrix[toy_matrix>5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6 7 8 9\n```\n:::\n\n```{.r .cell-code}\ntoy_df |> subset(x>1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     id y x\n1 unit1 1 3\n2 unit2 2 2\n```\n:::\n\n```{.r .cell-code}\ntoy_df[toy_df$x>1,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     id y x\n1 unit1 1 3\n2 unit2 2 2\n```\n:::\n:::\n\n\n#### Dplyr {.unnumbered}\n\n[Subset rows using column values](https://dplyr.tidyverse.org/reference/filter.html)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-10_4547d187d57331994a5c702c8718face'}\n\n```{.r .cell-code}\ntoy_df %>% dplyr::filter(x>1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     id y x\n1 unit1 1 3\n2 unit2 2 2\n```\n:::\n:::\n\n\n#### DataTable {.unnumbered}\n\n[Subsetting Rows](https://datatable.readthedocs.io/en/latest/manual/comparison_with_rdatatable.html)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-11_66bbdaca9b6c2544e9ce7914d13d023e'}\n\n```{.r .cell-code}\ntoy_dt |> subset(x>1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id y x\n1: unit1 1 3\n2: unit2 2 2\n```\n:::\n\n```{.r .cell-code}\ntoy_dt[x>1,,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id y x\n1: unit1 1 3\n2: unit2 2 2\n```\n:::\n:::\n\n\n## Python\n\n[How to Filter List Elements in Python](https://www.pythontutorial.net/python-basics/python-filter-list/)\n[filter(function, iterable, /)](https://docs.python.org/3/library/functions.html#filter)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-12_92521614ea49c0f83077d97009aaea51'}\n\n```{.python .cell-code}\n\nfiltered = []\nfor element in toy_list:\n  if type(element)==type([]):\n    filtered.append(element)\nfiltered\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[['red', 'green']]\n```\n:::\n:::\n\n\n[Python Filter()](https://www.techbeamers.com/python-filter-function/#:~:text=Python%20filter()%20function%20applies,is%20of%20the%20iterable%20type.)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-13_b5c0b68699ec01e76eb9d30e6bc77eff'}\n\n```{.python .cell-code}\n\ndef fun(element):\n  return( type(element)==type([]) )\nfiltered = filter(fun, toy_list)\ntype(filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'filter'>\n```\n:::\n\n```{.python .cell-code}\nlist(filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[['red', 'green']]\n```\n:::\n:::\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-14_dcc97c5d922274a8342fe8aac204fed5'}\n\n```{.python .cell-code}\n\n#filtered = filter(  lamda element : type(element)==type([]) , toy_list) #I don't know why this example fails but the next works\n#type(filtered)\n#list(filtered)\n\nscores = [70, 60, 80, 90, 50]\nfiltered = filter(lambda score: score >= 70, scores)\nprint(list(filtered))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[70, 80, 90]\n```\n:::\n:::\n\n\n[Filtering Elements in List Comprehensions](https://realpython.com/lessons/filtering-elements-list-comprehensions/)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-15_5b1eeca9137eafcbe3afd1108203f656'}\n\n```{.python .cell-code}\n[element for element in toy_list if type(element)==type([])]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[['red', 'green']]\n```\n:::\n:::\n\n\n[filter items in a python dictionary where keys contain a specific  string](https://stackoverflow.com/questions/23862406/filter-items-in-a-python-dictionary-where-keys-contain-a-specific-string)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-16_a65aa85140decf927330d854b85ecd03'}\n\n```{.python .cell-code}\n{k:v for k,v in toy_dictionary.items() if v>1}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'b': 2, 'c': 3}\n```\n:::\n:::\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-17_a23bbb34baf313f6c2fce76b274ed1ba'}\n\n```{.python .cell-code}\n# filter by key\ndict(filter(lambda e : e[0]=='a', toy_dictionary.items() ) ) \n# filter by value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'a': 1}\n```\n:::\n\n```{.python .cell-code}\ndict(filter(lambda e : e[1]>1, toy_dictionary.items() ) ) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'b': 2, 'c': 3}\n```\n:::\n:::\n\n\n\n[Filtering (reducing) a NumPy Array](https://stackoverflow.com/questions/58422690/filtering-reducing-a-numpy-array)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-18_928264f73f37f9a358fd06b7f61d27b2'}\n\n```{.python .cell-code}\ntoy_vector_numeric[toy_vector_numeric>1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([2, 3, 4, 5])\n```\n:::\n:::\n\n\n[Filter pandas Dataframes](https://chrisalbon.com/code/python/data_wrangling/filter_dataframes/)\n#This actually fitlers on row and column names not values\n[pandas.DataFrame.filter](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.filter.html)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-19_458ae3055fee4057f00b87b96afe0482'}\n\n```{.python .cell-code}\ntoy_df[toy_df['x']>1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id  y  x\n0  unit1  1  3\n1  unit2  2  2\n```\n:::\n:::\n\n\n[pandas.DataFrame.query](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-20_f5b4cb8ccdeb7ff568f79f52e7d58d2d'}\n\n```{.python .cell-code}\ntoy_df.query('x > 1')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id  y  x\n0  unit1  1  3\n1  unit2  2  2\n```\n:::\n:::\n\n\n\n## PostgreSQL\n\n[PostgreSQL WHERE](https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/)\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-21_4168ed64793f9812db3f1c2c443662d8'}\n\n```{.sql .cell-code}\n\nSELECT\t* FROM \ttoy_df\nwhere x>1;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|id    |  y|  x|\n|:-----|--:|--:|\n|unit1 |  1|  3|\n|unit2 |  2|  2|\n\n</div>\n:::\n\n\n## Torch\n\n\n::: {.cell hash='filter_cache/html/unnamed-chunk-22_daaa93c2e8867a48c043e9dcfb90ad35'}\n\n```{.python .cell-code}\nimport torch\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}