{
  "hash": "73551c156c4866ca2076b7d02c640c2d",
  "result": {
    "markdown": "# List (Sequence) {.unnumbered}\n\nAKA: Sequence, $a_n$ where n is the nth element, (1,2,3, ....)\n\nDistinct from: Set\n\nMeasure of:\n\nDescription: A list is a collection of objects with a specific ordering and where the same object can appear more than once. Call each object an element, and its location its index or rank. An index is a natural number counting upward from the first element in the list. Whether counting begins at 0 or 1 depends on local conventions.\n\nFormalization:\n\nAlgorithm:\n\nCites: [Wikipedia](https://en.wikipedia.org/wiki/Sequence) [Wikidata](https://www.wikidata.org/wiki/Q36161) [Encyclopedia Of Math](http://encyclopediaofmath.org/index.php?title=Sequence&oldid=48671) [Wolfram](https://mathworld.wolfram.com/Sequence.html)\n[PlanetMath](https://planetmath.org/sequence)\n\n::: panel-tabset\n\n## R\n\nDocumentation:\n\n[list: Lists -- Generic and Dotted Pairs](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/list)\n\nExamples:\n\n\n::: {.cell hash='list_cache/html/unnamed-chunk-1_ea3beb479442f31e8656f68f6d88cd64'}\n\n```{.r .cell-code}\nexample_list = list(1,2,3)\nexample_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n```\n:::\n:::\n\n\nSorting a list in R\n[Sorting or Ordering Vectors](https://stat.ethz.ch/R-manual/R-devel/library/base/html/sort.html)\n\nYou can specify auto, shell, quick, or radix algorithms. Auto typically chooses [radix](https://en.wikipedia.org/wiki/Radix_sort). Radix applies to lexigraphical data, e.g. string and numbers. Radix has $O(nw)$ time where $n$ is the number of keys and $w$ is the length of the keys.\n\n[Fast, stable and scalable true radix sorting](https://user2015.math.aau.dk/presentations/234.pdf)\n\n*Radix because it's fast for R's use case\n\n*It is [stable](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability). Stable sorts preserve the original order of two elements if they are equal by the sorting criteria.\n\n\n::: {.cell hash='list_cache/html/unnamed-chunk-2_06a1f454726c8b5bb021b347b3574602'}\n\n```{.r .cell-code}\ntemp <- 5:1\nsort(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n\n## Python\n\nDocumentation:\n\n[More on Lists](https://docs.python.org/3/tutorial/datastructures.html)\n\nExamples:\n\n\n::: {.cell hash='list_cache/html/unnamed-chunk-3_6a559f28d5c0911cbc01f1f5dc696067'}\n\n```{.python .cell-code}\nexample_list =  [1,2,3]\nexample_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n```\n:::\n:::\n\n\nThe 'range' function returns a generator for integers from between start to (stop-1). It'll do reverse as well but you have to pass a third decrement term. \n[The Python range() Function (Guide)](https://realpython.com/python-range/)\n\n::: {.cell hash='list_cache/html/unnamed-chunk-4_452eff946231803eff8b5ec079e31619'}\n\n```{.python .cell-code}\n[q for q in range(5,10)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[5, 6, 7, 8, 9]\n```\n:::\n\n```{.python .cell-code}\n[q for q in range(10,5,-1)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 9, 8, 7, 6]\n```\n:::\n:::\n\n\nPython lists have to ways to sort, in palce with \"sort\" or returning a new list with \"sorted\".\n[Sorting HOW TO](https://docs.python.org/3/howto/sorting.html)\n\nPython uses [Timsort](https://en.wikipedia.org/wiki/Timsort) whose best case is $O(n)$ and worst and average case are both $O(nlog(n))$\n\n\n::: {.cell hash='list_cache/html/unnamed-chunk-5_16fa6b1acb1d01b210ce570ca0bf4ae6'}\n\n```{.python .cell-code}\ntemp=[q for q in range(10,5,-1)]\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 9, 8, 7, 6]\n```\n:::\n\n```{.python .cell-code}\ntemp.sort()\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[6, 7, 8, 9, 10]\n```\n:::\n\n```{.python .cell-code}\ntemp=[q for q in range(10,5,-1)]\nsorted(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[6, 7, 8, 9, 10]\n```\n:::\n:::\n\n\n## SQL\n\n\n::: {.cell hash='list_cache/html/unnamed-chunk-6_1f965ae5a0062a5c5b92a20ef960c5f2'}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\ncon <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n\n```{.r .cell-code}\ndbWriteTable(con, \"mtcars\", mtcars)\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mtcars\"\n```\n:::\n:::\n\n::: {.cell hash='list_cache/html/unnamed-chunk-7_d572ab4fb395d158bb88d8d7dfd89d0d'}\n\n```{.sql .cell-code}\ncreate table StatisticalNumbers(\n value int\n)\n```\n:::\n\n::: {.cell hash='list_cache/html/unnamed-chunk-8_48651eaba1e373f87d5c28090e6ece95'}\n\n```{.sql .cell-code}\nSELECT * FROM mtcars LIMIT 5;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n| 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n| 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n| 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n| 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n| 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n\n</div>\n:::\n\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}