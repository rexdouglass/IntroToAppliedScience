{
  "hash": "2a1b14f232d17c23e263dd9e949903b7",
  "result": {
    "markdown": "# Boolean {.unnumbered}\n\n**Instance of**: \n\n**AKA**: Bool\n\n**Distinct from**: \n  \n**English**: \n\n**Formalization**:\n\n$$ \n$$\n\n**Cites**: [Wikipedia](https://en.wikipedia.org/wiki/Boolean_data_type)) ; [Wikidata]() \n\n**Code**\n  \n\n\n\n<details>\n<summary> Imports and spin up toy data objects and databases. </summary>\n\n::: {.cell}\n\n```{.r .cell-code}\ntoy_vector_numeric <- c(1,2,3,4,5)\ntoy_vector_character <- c('a','b','c','d','e')\ntoy_matrix <- matrix(1:9, nrow=3,ncol=3)\ntoy_list <- list('a','1',T,c('red','green'))\ntoy_df <- data.frame(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(data.table)\ntoy_dt <- data.table(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::between()   masks data.table::between()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::first()     masks data.table::first()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::last()      masks data.table::last()\n✖ purrr::transpose() masks data.table::transpose()\n```\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\ntoy_vector_numeric = np.array([1,2,3,4,5])\ntoy_vector_character = np.array(['a','b','c','d','e'])\ntoy_list = ['a','1',True,['red','green']]\ntoy_dictionary = { 'a':1 , 'b':2, 'c':3}\n\nfrom jax import numpy as jnp\ntoy_vector_numeric_jax = jnp.array([1,2,3,4,5])\n#toy_vector_character_jax = jnp.array(['a','b','c','d','e']) #only numeric is allowed in jax\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n```\n:::\n\n```{.python .cell-code}\nimport pandas as pd\ntoy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})\n\nimport torch\n\nimport tensorflow as tf\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon_Postgres <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS toy_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS toy_df (\n  id varchar(5),\n\ty INTEGER,\n\tx INTEGER\n);\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO toy_df (id, y, x)\nVALUES\n\t('unit1',1,3),\n\t('unit2',2,2),\n\t('unit3',3,1);\n\t\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"duckdb\")\nlibrary(\"DBI\")\ncon_duckdb = dbConnect(duckdb::duckdb(), \":memory:\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#pip install duckdb==0.6.0\nimport duckdb\ncursor_duckdb = duckdb.connect()\n```\n:::\n\n</details>\n\n\n\n## R\n\n#### Base {.unnumbered}\n\n[Logical Vectors](https://stat.ethz.ch/R-manual/R-devel/library/base/html/logical.html)\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-9_5e886c4f0709d9bb3a48812ae0da9ba7'}\n\n```{.r .cell-code}\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nT; F\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nlogical(length = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlogical(0)\n```\n:::\n\n```{.r .cell-code}\nas.logical(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.logical(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n## non-zero values are TRUE\nas.logical(c(pi,0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nif (length(letters)) cat(\"26 is TRUE\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n26 is TRUE\n```\n:::\n\n```{.r .cell-code}\n## logical interpretation of particular strings\ncharvec <- c(\"FALSE\", \"F\", \"False\", \"false\",    \"fAlse\", \"0\",\n             \"TRUE\",  \"T\", \"True\",  \"true\",     \"tRue\",  \"1\")\nas.logical(charvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE    NA    NA  TRUE  TRUE  TRUE  TRUE    NA    NA\n```\n:::\n\n```{.r .cell-code}\n## factors are converted via their levels, so string conversion is used\nas.logical(factor(charvec))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE    NA    NA  TRUE  TRUE  TRUE  TRUE    NA    NA\n```\n:::\n\n```{.r .cell-code}\nas.logical(factor(c(0,1)))  # \"0\" and \"1\" give NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA NA\n```\n:::\n\n```{.r .cell-code}\nlength(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n#### Tidyverse {.unnumbered}\n\n[]()\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-10_6cb5b40620f16b65524be2bf18868c85'}\n\n:::\n\n\n#### DataTable {.unnumbered}\n\n[]()\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-11_277ccc35d2d9baa96563cf6c983700ab'}\n\n:::\n\n\n#### Arrow {.unnumbered}\n\n[Apache Arrow data types](https://arrow.apache.org/docs/r/reference/data-type.html)\n\"These functions create type objects corresponding to Arrow types. Use them when defining a schema() or as inputs to other types, like struct. Most of these functions don't take arguments, but a few do.\"\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-12_c02ee6e786fcfc941ea3a176d02c6ab2'}\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'arrow'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:utils':\n\n    timestamp\n```\n:::\n\n```{.r .cell-code}\nboolean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBoolean\nbool\n```\n:::\n\n```{.r .cell-code}\nbool()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBoolean\nbool\n```\n:::\n:::\n\n\n## Python\n\n#### 3.x / math/ statistics\n\n\n[Boolean Values](https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values)\nBoolean Values\nBoolean values are the two constant objects False and True. They are used to represent truth values (although other values can also be considered false or true). In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively. The built-in function bool() can be used to convert any value to a Boolean, if the value can be interpreted as a truth value (see section Truth Value Testing above).\n\nThey are written as False and True, respectively.\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-13_d495286e85390cbf638a2daaa7d2a303'}\n\n```{.python .cell-code}\ntype(True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'bool'>\n```\n:::\n\n```{.python .cell-code}\ntype(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n```\n:::\n:::\n\n[class bool(x=False)](https://docs.python.org/3/library/functions.html#bool)\n\nclass bool(x=False)\nReturn a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure. If x is false or omitted, this returns False; otherwise, it returns True. The bool class is a subclass of int (see Numeric Types — int, float, complex). It cannot be subclassed further. Its only instances are False and True (see Boolean Values).\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-14_fb6c070f311ca895d76e3836bf42aeb5'}\n\n```{.python .cell-code}\nbool(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n\n```{.python .cell-code}\nbool(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n\n```{.python .cell-code}\nbool('A')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n\n```{.python .cell-code}\nbool(None)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n\n```{.python .cell-code}\n1==True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n\n```{.python .cell-code}\n'A'==True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\n[TypeError: object of type 'bool' has no len() in Python](https://bobbyhadz.com/blog/python-typeerror-object-of-type-bool-has-no-len)\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-15_077a7dc68b1affd4214423ae7f7c21ed'}\n\n```{.python .cell-code}\n\ntry:\n    print(len(True))\nexcept Exception as ex:\n    print(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nobject of type 'bool' has no len()\n```\n:::\n:::\n\n\n\n#### NumPy / SciPy / scikit-learn\n\n[]()\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-16_ba7b38b622674b85ce40f131a5f73422'}\n\n```{.python .cell-code}\nnp.array([[ True,  True],\n       [ True,  True]], dtype=bool)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[ True,  True],\n       [ True,  True]])\n```\n:::\n:::\n\n\n#### Pandas\n\n[]()\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-17_b314f0066dace89f9f210b8c4ff61657'}\n\n```{.python .cell-code}\n\npd.Series([True, False])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0     True\n1    False\ndtype: bool\n```\n:::\n\n```{.python .cell-code}\npd.Series([True]).bool()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n\n```{.python .cell-code}\ntry:\n    pd.Series([True, False]).bool() #Doesn't work on series with more than one value\nexcept Exception as ex:\n    print(ex)\n    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n```\n:::\n:::\n\n\n## Jax\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-18_9423533a661558f74f176f62b86431dd'}\n\n```{.python .cell-code}\njnp.array([[ True,  True],\n       [ True,  True]], dtype=bool)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray([[ True,  True],\n             [ True,  True]], dtype=bool)\n```\n:::\n:::\n\n\n## Numpyro\n\nUses jax's boolean array\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-19_be5a0d741566086eb3467d25ba3222bd'}\n\n:::\n\n\n## Stan\n\n[]()\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-20_c307ce5dd074694fd98a688ffd44c533'}\n\n:::\n\n\n## Torch\n\n[TENSOR ATTRIBUTES](https://pytorch.org/docs/stable/tensor_attributes.html)\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-21_028a68cd7f7b9ba1ebb9f6b5a8dcc09d'}\n\n```{.python .cell-code}\n\ntorch.zeros(10, dtype=torch.bool)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([False, False, False, False, False, False, False, False, False, False])\n```\n:::\n\n```{.python .cell-code}\ntorch.zeros(10).bool()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([False, False, False, False, False, False, False, False, False, False])\n```\n:::\n:::\n\n\n## Tensorflow\n\n[Introduction to Tensors](https://www.tensorflow.org/guide/tensor)\n[TensorFlow Data Types](https://pythonprogramminglanguage.com/tensorflow-datatypes/)\n\n\n::: {.cell hash='boolean_cache/html/unnamed-chunk-22_e048079fd52f2a9e53cfbdc9022f4a65'}\n\n```{.python .cell-code}\n\nprint(tf.constant([True,False], dtype=tf.bool))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor([ True False], shape=(2,), dtype=bool)\n```\n:::\n\n```{.python .cell-code}\ntry:\n    print(tf.constant([1,0], dtype=tf.bool))\nexcept Exception as ex:\n    print(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCannot convert [1, 0] to EagerTensor of dtype bool\n```\n:::\n\n```{.python .cell-code}\nprint(tf.cast(tf.constant([1,0]), tf.bool))\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor([ True False], shape=(2,), dtype=bool)\n```\n:::\n:::\n\n\n## PostgreSQL\n\n[]()\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS bool_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS bool_df (\n  example_bool boolean\n);\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO bool_df (example_bool)\nVALUES\n  (NULL),\n  (TRUE),\n  ('t'),\n  ('true'),\n  ('y'),\n  ('yes'), /* lol what? */\n  ('on'),  /* lol what? */\n  ('1'),\n  (FALSE),\n  ('f'),\n  ('false'),\n  ('n'),\n  ('no'),  /* lol what? */\n  ('off'); /* lol what? */\n  \n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nSELECT * from bool_df;\n  \n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|example_bool |\n|:------------|\n|NA           |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|FALSE        |\n|FALSE        |\n\n</div>\n:::\n\n\n\n## DuckDB\n\n[Boolean Type](https://duckdb.org/docs/sql/data_types/boolean.html)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS bool_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS bool_df (\n  example_bool boolean\n);\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO bool_df (example_bool)\nVALUES\n  (NULL),\n  (TRUE),\n  ('t'),\n  ('true'),\n  ('1'),\n  (1),\n  (15),\n  (-1),\n  (FALSE),\n  ('f'),\n  ('false'),\n  ('0'),\n  (0) ;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nSELECT * from bool_df;\n  \n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|example_bool |\n|:------------|\n|NA           |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|TRUE         |\n|FALSE        |\n|FALSE        |\n\n</div>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}