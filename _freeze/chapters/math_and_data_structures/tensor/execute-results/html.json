{
  "hash": "760d0d63d9e86ea24dccfbd92b5978f8",
  "result": {
    "markdown": "# Vector / Matrix / Tensor {.unnumbered}\n\n**Instance of**: algebraic object / data structure\n\n**AKA**: array, matrices\n\n**Distinct from**: list\n\n**English**: Vectors, matrices, and tensors are like lists in that they are a collection of objects which are indexed. They differ in that the index can be multi-dimensional, where vectors are 1-d indexed, matrices are 2-d indexed, and tensors are m-d indexed. They also are typically constrained to have objects that share the same type, e.g. numbers or strings.\n\n**Formalization**:\n\n$$ \n$$\n    \n    \n**Cites**: \n\nArray: \n\n[Wikipedia](https://en.wikipedia.org/wiki/Array_(data_structure))\n\n[3Blue1Brown: Vectors | Chapter 1, Essence of linear algebra](https://www.youtube.com/watch?v=fNk_zzaMoSs)\n[3Blue1Brown: Linear combinations, span, and basis vectors | Chapter 2, Essence of linear algebra](https://www.youtube.com/watch?v=k7RM-ot2NWY)\n\n[https://superstudy.guide/algorithms-data-structures/data-structures/arrays-strings](https://superstudy.guide/algorithms-data-structures/data-structures/arrays-strings)\n*Kadane's algorithm\n\n\nMatrix:\n\n[Wikipedia](https://en.wikipedia.org/wiki/Matrix_(mathematics))\n\n[3Blue1Brown: Linear transformations and matrices | Chapter 3, Essence of linear algebra](https://www.youtube.com/watch?v=kYB8IZa5AuE)\n\nTensor:\n\n[Wikipedia](https://en.wikipedia.org/wiki/Tensor)\n  \n**Code**\n    \n::: panel-tabset\n  \n### R\n\n**Vector**\n\nNote unlike matrix and array, the basic vector function initializes an empty vector and you have to actually use as.vector to coerce something else to vector as the constructor.\n\n[vector: Vectors](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/vector)\n\n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-1_63f8771b74a9a79d7c75d4d0c356ec4e'}\n\n```{.r .cell-code}\nexample_vector <- as.vector(c(1,2,3,4))\nclass(example_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nexample_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4\n```\n:::\n:::\n\n\n**Matrix**\n\nNote we can choose which direction to fill the matrix with, either by row1-col1, row1-col2, row1-col3, row1-col4\n\n[matrix: Matrices](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/matrix)\n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-2_60dd275698cb376d7017066207e0124f'}\n\n```{.r .cell-code}\nexample_matrix <- matrix(c(1,2,3,4,\"A\",\"B\",\"C\",\"D\"), nrow = 2, ncol = 4, byrow = TRUE,\n               dimnames = list(c(\"row1\", \"row2\"),\n                               c(\"C.1\", \"C.2\", \"C.3\", \"C.4\")))\nclass(example_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\" \n```\n:::\n\n```{.r .cell-code}\nexample_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     C.1 C.2 C.3 C.4\nrow1 \"1\" \"2\" \"3\" \"4\"\nrow2 \"A\" \"B\" \"C\" \"D\"\n```\n:::\n:::\n\n\n\n**Arrays**\n\nNote array dimensions are ordered, row, column, depth, ..., M , and elements are filled row1-col1-depth1, row2-col1-depth1, row1-col2-depth1,... and so on. Note this was coerced to a string because any of the elements were a string.\n\n[array: Multi-way Arrays](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/array)\n\n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-3_a02daf3491776b77b521c584f4bd2e12'}\n\n```{.r .cell-code}\nexample_tensor= array(c(1,2,3,4,\"A\",\"B\",\"C\",\"D\",\"+\",\"-\",\"*\",\"/\"),dim=c(2,3,2,2)) \nclass(example_tensor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"array\"\n```\n:::\n\n```{.r .cell-code}\nexample_tensor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1, 1\n\n     [,1] [,2] [,3]\n[1,] \"1\"  \"3\"  \"A\" \n[2,] \"2\"  \"4\"  \"B\" \n\n, , 2, 1\n\n     [,1] [,2] [,3]\n[1,] \"C\"  \"+\"  \"*\" \n[2,] \"D\"  \"-\"  \"/\" \n\n, , 1, 2\n\n     [,1] [,2] [,3]\n[1,] \"1\"  \"3\"  \"A\" \n[2,] \"2\"  \"4\"  \"B\" \n\n, , 2, 2\n\n     [,1] [,2] [,3]\n[1,] \"C\"  \"+\"  \"*\" \n[2,] \"D\"  \"-\"  \"/\" \n```\n:::\n:::\n\n\n\n### Python\n\n**Documentation**: \n\nExamples:\n  \n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-4_07d37829047aab5215770d74280ea285'}\n\n:::\n\n\n\n### SQL\n\n**Documentation**: \n\n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-5_22fc286209af6b96738f55436d716253'}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: RPostgres\n```\n:::\n\n```{.r .cell-code}\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-6_b10d36beb15c31299f50f23b34d777b2'}\n\n```{.sql .cell-code}\n\n```\n:::\n\n\n### Jax\n\n\"JAX provides a multidimensional array data structure called DeviceArray that implements many typical properties and methods of the numpy.ndarray\"\n\n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-7_71497249efbe75bbb9366aaf1138b266'}\n\n```{.python .cell-code}\nimport torch\n```\n:::\n\n\n### Torch\n\n\n::: {.cell hash='tensor_cache/html/unnamed-chunk-8_4d934bee4e062cfcfdbf6841701a8c66'}\n\n```{.python .cell-code}\nimport torch\n```\n:::\n\n\n:::\n\n  \n    ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}