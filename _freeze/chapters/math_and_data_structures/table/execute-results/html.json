{
  "hash": "bfc7111d2a30a396a0e5f0b4f57ecf88",
  "result": {
    "markdown": "# Table  {.unnumbered}\n\n  \n## Introduction\n  \n**Instance of**: arrangement of information or data\n\n**AKA**: Dataframe\n\n**Distinct from**: \n\n**English**: A collection of rows and columns, where rows represent specific instances (AKA records, k-tuple, n-tuple, or a vector), and columns represent features (AKA variables, parameters, properties, attributes, or stanchions). The intersection of a row and column is called a sell.\n\n**Formalization**:\n  \n$$ \n$$\n    \n**Cites**: [Wikipedia Table (information)](https://en.wikipedia.org/wiki/Table_(information)) ; [Wikipedia Table Table (database)](https://en.wikipedia.org/wiki/Table_(database)) ; [Wikidata]() ; [Wolfram]()\n\n[ML Frameworks Interoperability Cheat Sheet](http://bl.ocks.org/miguelusque/raw/f44a8e729896a96d0a3e4b07b5176af4/)\n  \n**Code**\n    \n::: panel-tabset\n  \n### R\n**Documentation**: [data.frame: Data Frames](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame)\n\nExamples:\n    \n\n::: {.cell hash='table_cache/html/unnamed-chunk-1_271452735fce2aea05f16c17013a8475'}\n\n```{.r .cell-code}\ndf=data.frame(a=c(1,2,3,4), b=c('a','b','c','d'))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a b\n1 1 a\n2 2 b\n3 3 c\n4 4 d\n```\n:::\n:::\n\n\n### Python\n\n**Documentation**: [pandas.DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)\n\nExamples:\n  \n\n::: {.cell hash='table_cache/html/unnamed-chunk-2_6a575a543d99573427a4c85b7ebe0295'}\n\n```{.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame({'a': [1, 2,3,4], 'b': ['a','b','c','d']})\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   a  b\n0  1  a\n1  2  b\n2  3  c\n3  4  d\n```\n:::\n:::\n\n\n\n### SQL\n\n**Documentation**: [PostgreSQL AVG Function](https://www.postgresqltutorial.com/postgresql-aggregate-functions/postgresql-avg-function/)\n\n\n::: {.cell hash='table_cache/html/unnamed-chunk-3_bf9ce17482bd67f3fe0880de1a93cabe'}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: RPostgres\n```\n:::\n\n```{.r .cell-code}\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n::: {.cell hash='table_cache/html/unnamed-chunk-4_2442df03845fc37ea971ecddcee87f79'}\n\n```{.sql .cell-code}\nDROP TABLE IF EXISTS df;\n```\n:::\n\n::: {.cell hash='table_cache/html/unnamed-chunk-5_1e76b2cc28a92f936e0cc494f9eb414a'}\n\n```{.sql .cell-code}\nCREATE TABLE IF NOT EXISTS df (\n\ta INTEGER,\n\tb CHAR\n);\n```\n:::\n\n::: {.cell hash='table_cache/html/unnamed-chunk-6_7706aae47610c347c01c6341b5aea494'}\n\n```{.sql .cell-code}\nINSERT INTO df (a, b)\nVALUES\n\t(1,'a'),\n\t(2,'b'),\n\t(3,'c'),\n\t(4,'d');\n```\n:::\n\n::: {.cell hash='table_cache/html/unnamed-chunk-7_c001cbc9866f64dfb6967522a609e56a'}\n\n```{.sql .cell-code}\nSELECT\t* FROM \tdf;\n\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 4 records\n\n|a  |b  |\n|:--|:--|\n|1  |a  |\n|2  |b  |\n|3  |c  |\n|4  |d  |\n\n</div>\n:::\n\n\n### Torch\n\n\n::: {.cell hash='table_cache/html/unnamed-chunk-8_6dd65d04510eeb6139d5382daa893581'}\n\n```{.python .cell-code}\nimport torch\n```\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}