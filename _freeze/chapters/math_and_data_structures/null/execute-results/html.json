{
  "hash": "d099a1605db1abc9f119c496158f1b12",
  "result": {
    "markdown": "# NULL {.unnumbered}\n\n**Instance of**: \n\n**AKA**: null, NULL\n\n**Distinct from**: \n  \n**English**: \n\n**Formalization**:\n\n$$ \n$$\n\n**Cites**: [Wikipedia Null (SQL)](https://en.wikipedia.org/wiki/Null_(SQL))) ; [Wikidata Q371029](https://www.wikidata.org/wiki/Q371029) \n\n[R null values: NULL, NA, NaN, Inf](https://www.r-bloggers.com/2018/07/r-null-values-null-na-nan-inf/)\n\n**Code**\n  \n\n\n\n<details>\n<summary> Imports and spin up toy data objects and databases. </summary>\n\n::: {.cell}\n\n```{.r .cell-code}\ntoy_vector_numeric <- c(1,2,3,4,5)\ntoy_vector_character <- c('a','b','c','d','e')\ntoy_matrix <- matrix(1:9, nrow=3,ncol=3)\ntoy_list <- list('a','1',T,c('red','green'))\ntoy_df <- data.frame(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(data.table)\ntoy_dt <- data.table(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::between()   masks data.table::between()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::first()     masks data.table::first()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::last()      masks data.table::last()\n✖ purrr::transpose() masks data.table::transpose()\n```\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'arrow'\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n```\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\ntoy_vector_numeric = np.array([1,2,3,4,5])\ntoy_vector_character = np.array(['a','b','c','d','e'])\ntoy_list = ['a','1',True,['red','green']]\ntoy_dictionary = { 'a':1 , 'b':2, 'c':3}\n\nfrom jax import numpy as jnp\ntoy_vector_numeric_jax = jnp.array([1,2,3,4,5])\n#toy_vector_character_jax = jnp.array(['a','b','c','d','e']) #only numeric is allowed in jax\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n```\n:::\n\n```{.python .cell-code}\nimport pandas as pd\ntoy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})\n\nimport torch\n\nimport tensorflow as tf\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon_Postgres <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS toy_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS toy_df (\n  id varchar(5),\n\ty INTEGER,\n\tx INTEGER\n);\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO toy_df (id, y, x)\nVALUES\n\t('unit1',1,3),\n\t('unit2',2,2),\n\t('unit3',3,1);\n\t\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"duckdb\")\nlibrary(\"DBI\")\ncon_duckdb = dbConnect(duckdb::duckdb(), \":memory:\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#pip install duckdb==0.6.0\nimport duckdb\ncursor_duckdb = duckdb.connect()\n```\n:::\n\n</details>\n\n\n\n## R\n\n#### Base {.unnumbered}\n\n[The Null Object](https://stat.ethz.ch/R-manual/R-devel/library/base/html/NULL.html)\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-9_3d916ce371ce2077f22e926bf726513e'}\n\n```{.r .cell-code}\nclass(NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NULL\"\n```\n:::\n\n```{.r .cell-code}\nis.null(NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nlength(NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nis.null(list())     # FALSE (on purpose!)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.null(pairlist()) # TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.null(integer(0)) # FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.null(logical(0)) # FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nas.null(list(a = 1, b = \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n#### Tidyverse {.unnumbered}\n\n[Is object an empty vector or NULL?](https://rdrr.io/github/tidyverse/rlang/man/is_empty.html)\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-10_fe9cc1396594bb3f087a2aee951538df'}\n\n```{.r .cell-code}\nis_empty(NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_empty(list())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_empty(list(NULL))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nNULL==NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlogical(0)\n```\n:::\n\n```{.r .cell-code}\nNULL==6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlogical(0)\n```\n:::\n:::\n\n\n[Default value for NULL](https://rlang.r-lib.org/reference/op-null-default.html)\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-11_63db235d8a99737d27e36824974d2b20'}\n\n```{.r .cell-code}\n#Replace Nulls\n1 %||% 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nNULL %||% 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n#### DataTable {.unnumbered}\n\n[]()\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-12_fe7c1b65731192a0f0a655cbd8c852f7'}\n\n:::\n\n\n#### Arrow {.unnumbered}\n\n[Apache Arrow data types](https://arrow.apache.org/docs/r/reference/data-type.html)\n\"These functions create type objects corresponding to Arrow types. Use them when defining a schema() or as inputs to other types, like struct. Most of these functions don't take arguments, but a few do.\"\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-13_5f026a88b7a706df95ebf0be9709d304'}\n\n```{.r .cell-code}\nnull()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNull\nnull\n```\n:::\n:::\n\n\n## Python\n\n#### 3.x / math/ statistics\n\n\n[None](https://docs.python.org/3/library/constants.html)\n[Python None Keyword](https://www.w3schools.com/python/ref_keyword_none.asp)\n\nNone\nAn object frequently used to represent the absence of a value, as when default arguments are not passed to a function. Assignments to None are illegal and raise a SyntaxError. None is the sole instance of the NoneType type.\n\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-14_ed7325fb62fe93d828001f09c46574a4'}\n\n```{.python .cell-code}\n\ntype(None)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'NoneType'>\n```\n:::\n\n```{.python .cell-code}\nNone is True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n\n```{.python .cell-code}\nNone is False\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n\n```{.python .cell-code}\ntry:\n    print(len(None))\nexcept Exception as ex:\n    print(ex)\n    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nobject of type 'NoneType' has no len()\n```\n:::\n:::\n\n::: {.cell hash='null_cache/html/unnamed-chunk-15_9fb5aee732587ab2f2fd13527d3bd3ef'}\n\n```{.python .cell-code}\n\ntry:\n    print(len(None)) #None has no length\nexcept Exception as ex:\n    print(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nobject of type 'NoneType' has no len()\n```\n:::\n:::\n\n\n\n#### NumPy / SciPy / scikit-learn\n\n[]()\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-16_3bfd0dad4eb2000928426bc3246d1bf5'}\n\n```{.python .cell-code}\n\nnp.array([[ None,  None],\n          [ None,  None]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[None, None],\n       [None, None]], dtype=object)\n```\n:::\n\n```{.python .cell-code}\nnp.array([[ None,  None],\n          [ None,  None]], dtype=bool)\n          \n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[False, False],\n       [False, False]])\n```\n:::\n:::\n\n\n#### Pandas\n\n[]()\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-17_1e3e723e6ccdb220a0f6a4f5282e28df'}\n\n```{.python .cell-code}\n\npd.Series([None, None])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    None\n1    None\ndtype: object\n```\n:::\n\n```{.python .cell-code}\npd.Series([None, None]).isnull()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    True\n1    True\ndtype: bool\n```\n:::\n\n```{.python .cell-code}\npd.Series([1, None]).notnull()\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0     True\n1    False\ndtype: bool\n```\n:::\n:::\n\n\n## Jax\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-18_c2cbc096757c4802b603f75756daff74'}\n\n```{.python .cell-code}\n\njnp.array([[ None,  None],\n           [ None,  None]])\n           \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray([[nan, nan],\n             [nan, nan]], dtype=float32)\n```\n:::\n:::\n\n\n## Numpyro\n\nUses jax's boolean array\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-19_0bdbf0d894f175c1cda64c475d3608ae'}\n\n:::\n\n\n## Stan\n\n[]()\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-20_90f3d70292d9af6b45bab2686bdc613d'}\n\n:::\n\n\n## Torch\n\n[TORCH.NAN_TO_NUM](https://pytorch.org/docs/stable/generated/torch.nan_to_num.htmll)\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-21_971a9df82379237f098b9587996fa6df'}\n\n```{.python .cell-code}\n\ntorch.tensor([float('nan'), float('inf'), -float('inf'), 3.14])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([   nan,    inf,   -inf, 3.1400])\n```\n:::\n\n```{.python .cell-code}\ntry:\n    print(torch.tensor([None])) #Fails\nexcept Exception as ex:\n    print(ex)\n    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCould not infer dtype of NoneType\n```\n:::\n:::\n\n\n## Tensorflow\n\n[]()\n\n\n::: {.cell hash='null_cache/html/unnamed-chunk-22_3c990531af9d00614d9123c225c60921'}\n\n```{.python .cell-code}\n\ntf.constant([5.0, np.nan, 6.8, np.nan, np.inf])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<tf.Tensor: shape=(5,), dtype=float32, numpy=array([5. , nan, 6.8, nan, inf], dtype=float32)>\n```\n:::\n\n```{.python .cell-code}\ntf.math.is_nan(tf.constant([5.0, np.nan, 6.8, np.nan, np.inf]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<tf.Tensor: shape=(5,), dtype=bool, numpy=array([False,  True, False,  True, False])>\n```\n:::\n\n```{.python .cell-code}\ntry:\n    print(tf.constant([None,None], dtype=tf.bool))\nexcept Exception as ex:\n    print(ex)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAttempt to convert a value (None) with an unsupported type (<class 'NoneType'>) to a Tensor.\n```\n:::\n:::\n\n\n## PostgreSQL\n\n[]()\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS null_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS null_df (\n  example_null boolean,\n  example_notnull boolean NOT NULL\n);\n\n```\n:::\n\n\nError: Failed to fetch row: ERROR:  null value in column \"example_notnull\" of relation \"null_df\" violates not-null constraint\nDETAIL:  Failing row contains (t, null).\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO null_df (example_null, example_notnull)\nVALUES\n  (NULL, False),\n  (TRUE, NULL);\n;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO null_df (example_null, example_notnull)\nVALUES\n  (NULL, False),\n  (TRUE, TRUE);\n;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nSELECT * from null_df;\n  \n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 0 records\n\n|example_null |example_notnull |\n|:------------|:---------------|\n\n</div>\n:::\n\n\n## DuckDB\n\n[Boolean Type](https://duckdb.org/docs/sql/data_types/boolean.html)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS null_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS null_df (\n  example_null boolean,\n  example_notnull boolean NOT NULL\n);\n\n```\n:::\n\n\nError: rapi_execute: Failed to run query\nError: Constraint Error: NOT NULL constraint failed: null_df.example_notnull\nFailed to execute SQL chunk\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO null_df (example_null, example_notnull)\nVALUES\n  (NULL, False),\n  (TRUE, NULL);\n;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO null_df (example_null, example_notnull)\nVALUES\n  (NULL, False),\n  (TRUE, TRUE);\n;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nSELECT * from null_df;\n  \n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 0 records\n\n|example_null |example_notnull |\n|:------------|:---------------|\n\n</div>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}