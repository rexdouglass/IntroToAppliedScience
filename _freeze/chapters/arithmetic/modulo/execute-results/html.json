{
  "hash": "fe0a65f516f5b2ceeb14e981dcff9af0",
  "result": {
    "markdown": "# Modulo  {.unnumbered}\n\n**Instance of**: modular arithmetic\n\n**AKA**: \n\n**Distinct from**: \n\n**English**: A modulo operation retrieves the remainder following euclidean division. Euclidean division is division with a remainder. The quotient is an integer count of the number of times the whole divisor can be placed in the dividend. The remainder is the dividend minus the quotient times the divisor.\n\n**Formalization**:\n\n$$ \n$$\n\n**Cites**: [Wikipedia]() ; [Wikidata]() ; [Wolfram]()\n\n**Code**\n\n::: panel-tabset\n\n### R\n[]()\n\nExamples:\n\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-1_e580e0db855394c49aecc54523d911f7'}\n\n```{.r .cell-code}\ndividend=10\ndivisor=3\nremainder= 10 %% 3\nremainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n\n### Python\n\n[]()\n\nExamples:\n\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-2_57b3a1ef34d518129a7b4d07a36f008f'}\n\n```{.python .cell-code}\ndividend=10\ndivisor=3\nremainder= 10 % 3\nremainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n### Numpy\n\n[]()\n\nExamples:\n\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-3_2a91be1dc35e76f98850bf54bb27b742'}\n\n```{.python .cell-code}\nimport numpy as np\ndividend=np.array(10)\ndivisor=np.array(3)\nremainder= np.mod(10,3)\nremainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\n### Jax\n\n[]()\n\nExamples:\n\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-4_c2ad9626bf937229cfe1309bb21e737c'}\n\n```{.python .cell-code}\nimport jax.numpy as jnp\ndividend=jnp.array(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n```\n:::\n\n```{.python .cell-code}\ndivisor=jnp.array(3)\nremainder= jnp.mod(10,3)\nremainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray(1, dtype=int32, weak_type=True)\n```\n:::\n:::\n\n\n\n### SQL\n\n[]()\n\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-5_153a0c3d7a72e51076040355caa3dc4c'}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: RPostgres\n```\n:::\n\n```{.r .cell-code}\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-6_4146f50914ff7be7e9f1c352998ce8ef'}\n\n```{.sql .cell-code}\nSELECT MOD(10, 3);\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| mod|\n|---:|\n|   1|\n\n</div>\n:::\n\n\n### Torch\n\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-7_9604fad14d1d520eaf9b7855ad0d37c5'}\n\n```{.python .cell-code}\nimport torch\ndividend = torch.tensor(10)\ndivisor = torch.tensor(3)\nremainder=torch.remainder(dividend, divisor)\nremainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor(1)\n```\n:::\n:::\n\n\n:::\n\n### Tensorflow\n\n\n::: {.cell hash='modulo_cache/html/unnamed-chunk-8_b136267c6db49c1c98b976b8a1e0bd24'}\n\n```{.python .cell-code}\nimport tensorflow as tf\ndividend = tf.constant(10)\ndivisor = tf.constant(3)\nremainder=tf.math.floormod(dividend, divisor)\nremainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<tf.Tensor: shape=(), dtype=int32, numpy=1>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}