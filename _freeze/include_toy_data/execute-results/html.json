{
  "hash": "bed8898c519915ec4ac2640c3563d895",
  "result": {
    "markdown": "\n\n\n<details>\n<summary> Imports and spin up toy data objects and databases. </summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoy_vector_numeric <- c(1,2,3,4,5)\ntoy_vector_character <- c('a','b','c','d','e')\ntoy_matrix <- matrix(1:9, nrow=3,ncol=3)\ntoy_list <- list('a','1',T,c('red','green'))\ntoy_df <- data.frame(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(data.table)\ntoy_dt <- data.table(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::between()   masks data.table::between()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::first()     masks data.table::first()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::last()      masks data.table::last()\n✖ purrr::transpose() masks data.table::transpose()\n```\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'arrow'\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\ntoy_vector_numeric = np.array([1,2,3,4,5])\ntoy_vector_character = np.array(['a','b','c','d','e'])\ntoy_list = ['a','1',True,['red','green']]\ntoy_dictionary = { 'a':1 , 'b':2, 'c':3}\n\nfrom jax import numpy as jnp\ntoy_vector_numeric_jax = jnp.array([1,2,3,4,5])\n#toy_vector_character_jax = jnp.array(['a','b','c','d','e']) #only numeric is allowed in jax\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n```\n:::\n\n```{.python .cell-code}\nimport pandas as pd\ntoy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})\n\nimport torch\n\nimport tensorflow as tf\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n# Create an ephemeral in-memory RSQLite database\n#con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")\n#dbListTables(con)\n#dbWriteTable(con, \"mtcars\", mtcars)\n#dbListTables(con)\n\n#Configuration failed because libpq was not found. Try installing:\n#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)\n#install.packages('RPostgres')\n#remotes::install_github(\"r-dbi/RPostgres\")\n#Took forever because my file permissions were broken\n#pg_lsclusters\nrequire(RPostgres)\n# Connect to the default postgres database\n#I had to follow these instructions and create both a username and database that matched my ubuntu name\n#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\ncon_Postgres <- dbConnect(RPostgres::Postgres())\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nDROP TABLE IF EXISTS toy_df;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TABLE IF NOT EXISTS toy_df (\n  id varchar(5),\n\ty INTEGER,\n\tx INTEGER\n);\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nINSERT INTO toy_df (id, y, x)\nVALUES\n\t('unit1',1,3),\n\t('unit2',2,2),\n\t('unit3',3,1);\n\t\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"duckdb\")\nlibrary(\"DBI\")\ncon_duckdb = dbConnect(duckdb::duckdb(), \":memory:\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#pip install duckdb==0.6.0\nimport duckdb\ncursor_duckdb = duckdb.connect()\n```\n:::\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}