---
title: "Vector/Matrix/Tensor"
---
  
## Introduction
  
**Instance of**: algebraic object / data structure

**AKA**: array, matrices

**Distinct from**: list

**English**: Vector, matrices, and tensors are like lists in that they are a collection of objects which are indexed. They differ in that the index can be multi-dimensional, where vectors are 1-d indexed, matrices are 2-d indexed, and tensors are m-d indexed. They also are typically constrained to have objects that share the same type, e.g. numbers or strings.

**Formalization**:

$$ 
$$
    
    
**Cites**: 

Array: [Wikipedia](https://en.wikipedia.org/wiki/Array_(data_structure))

Matrix:

Tensor: [Wikipedia](https://en.wikipedia.org/wiki/Tensor) ; [Wikidata]() ; [Wolfram]()
  
**Code**
    
::: panel-tabset
  
### R
**Documentation**: [mean: Arithmetic Mean](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/mean)
  
Examples:
    
```{r}
```


### Python

**Documentation**: [numpy.mean](https://numpy.org/doc/stable/reference/generated/numpy.mean.html)

Examples:
  
```{python}
```


### SQL

**Documentation**: [PostgreSQL AVG Function](https://www.postgresqltutorial.com/postgresql-aggregate-functions/postgresql-avg-function/)

```{r}
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)

#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())

```

```{sql, connection=con}
```

### Torch

```{python}
import torch

```

:::

## Bayesian

**English**: 
**Formalization**:

$$
$$
  
Cites:

**Code**
  
    