example_list = list(1,2,3)
example_list
reticulate::repl_python()
example_list = list(1,2,3)
example_list
reticulate::repl_python()
library(DBI)
db = dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
db
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
library(DBI)
# Create an ephemeral in-memory RSQLite database
db <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dbListTables(con)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
library(DBI)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
install.packages('RPostgres')
library(DBI)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
install.packages('RPostgres')
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
require(DBI)
require(RPostgres)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
require(DBI)
require(RPostgres)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
remotes::install_github("r-dbi/RPostgres")
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
require(RPostgres)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
require(RPostgres)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
require(RPostgres)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
con <- RPostgres::dbConnect(RPostgres::Postgres(),
dbname = 'name',
host = 'host',
user = 'user',
password = 'pass',
port = 5432)
con <- dbConnect(RPostgres::Postgres())
con <- dbConnect(RPostgres::Postgres())
con <- RPostgres::dbConnect(RPostgres::Postgres(),
dbname = 'skynet3',
host = 'host',
user = 'skynet3',
password = 'pass',
port = 5432)
require(RPostgres)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
example_list = list(1,2,3)
example_list
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
example_list = list(1,2,3)
example_list
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
example_list = list(1,2,3)
example_list
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
x = vector(1,2,3)
x = c(1,2,3)
x
x_bar = sum(x, na.rm=T)/length(x)
x_bar
x_bar = mean(x, na.rm=T)
x_bar
x = c(1,2,3,4)
x
x_bar = sum(x, na.rm=T)/length(x)
x_bar
x_bar = mean(x, na.rm=T)
x_bar
x = c(1,2,3,4)
x
#Algorithm
x_bar = sum(x, na.rm=T)/length(x)
x_bar
#Base Function
x_bar = mean(x, na.rm=T)
x_bar
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
reticulate::repl_python()
x = c(1,2,3,4)
x
#Algorithm
x_bar = sum(x, na.rm=T)/length(x)
x_bar
#Base Function
x_bar = mean(x, na.rm=T)
x_bar
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
reticulate::repl_python()
x = c(1,2,3,4)
x
#Algorithm
x_bar = sum(x, na.rm=T)/length(x)
x_bar
#Base Function
x_bar = mean(x, na.rm=T)
x_bar
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
x = c(1,2,3,4)
x
#Algorithm
x_bar = sum(x, na.rm=T)/length(x)
x_bar
#Base Function
x_bar = mean(x, na.rm=T)
x_bar
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
x = c(1,2,3,4)
x
#Algorithm
x_bar = sum(x, na.rm=T)/length(x)
x_bar
#Base Function
x_bar = mean(x, na.rm=T)
x_bar
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
x = c(1,2,3,4)
x
#Algorithm
x_bar = sum(x, na.rm=T)/length(x)
x_bar
#Base Function
x_bar = mean(x, na.rm=T)
x_bar
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
df=data.frame(a=c(1,2,3,4), b=c('A','B','C','D'))
df
reticulate::repl_python()
df=data.frame(a=c(1,2,3,4), b=c('a','b','c','d'))
df
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
as.array(letters)
dim(as.array(letters))
example_tensor= array(c(1,2,3),('A','B','C'))
example_tensor= array(c(1,2,3),c('A','B','C'))
?array
array(c(1,2,3),c('A','B','C'))
example_tensor= array(c(1,2,3,"A","B","C"),dim=c(1,2))
example_tensor
example_tensor= array(c(1,2,3,"A","B","C"),dim=c(2,3))
example_tensor= array(c(1,2,3,"A","B","C"),dim=c(2,3))
example_tensor
example_tensor= array(c(1,2,3,4,"A","B","C","D","+","-","*","/"),dim=c(2,3,2))
example_tensor
example_tensor
example_tensor[1,,]
example_tensor[,1,]
example_matrix <- matrix(c(1,2,3,4,"A","B","C","D"), nrow = 2, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2")))
example_matrix <- matrix(c(1,2,3,4,"A","B","C","D"), nrow = 2, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3", "C.4")))
example_matrix
example_vector <- vector(c(1,2,3,4))
example_vector <- as.vector(c(1,2,3,4))
example_vector
class(example_vector)
class(example_matrix)
example_vector <- as.vector(c(1,2,3,4))
example_vector
class(example_vector)
example_matrix <- matrix(c(1,2,3,4,"A","B","C","D"), nrow = 2, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3", "C.4")))
example_matrix
class(example_matrix)
example_tensor= array(c(1,2,3,4,"A","B","C","D","+","-","*","/"),dim=c(2,3,2,2))
example_tensor
class(example_tensor)
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
reticulate::repl_python()
example_vector <- as.vector(c(1,2,3,4))
example_vector
class(example_vector)
example_matrix <- matrix(c(1,2,3,4,"A","B","C","D"), nrow = 2, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3", "C.4")))
example_matrix
class(example_matrix)
example_tensor= array(c(1,2,3,4,"A","B","C","D","+","-","*","/"),dim=c(2,3,2,2))
example_tensor
class(example_tensor)
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
reticulate::repl_python()
install.packages("vembedr")
#install.packages("vembedr")
vembedr::embed_url("https://www.youtube.com/watch?v=cbAOfPdsTSo")
?vembedr::embed_url
install.packages('V8')
#library(V8)
#cx <- v8()
#cx$source("/home/skynet3/Downloads/twitter-2022-11-08-24fa1be25590defacf8df1fe45d475a1b82d1e6d6223a7c9cb10e61deff3c19d/data/tweets.js") # now the variable 'data' is defined #in V8
#cx$get("data")
file="/home/skynet3/Downloads/twitter-2022-11-08-24fa1be25590defacf8df1fe45d475a1b82d1e6d6223a7c9cb10e61deff3c19d/data/tweets.js"
library(jsonlite)
df <- fromJSON(file)
names(df)
library(tidyverse)
tweets <- df$tweet %>% janitor::clean_names()
dim(tweets)
names(tweets)
tweets$rex_rank <- as.numeric(tweets$retweet_count) + as.numeric(tweets$favorite_count)
extended_entities <- tweets$extended_entities$media
dim(extended_entities)
extended_entities <- tweets$entities$urls
dim(extended_entities)
tweets$url <- sapply(tweets$entities$urls, FUN=function(x) { ifelse(is.null(x$expanded_url), NA, x$expanded_url) } ) %>% unlist()
tweets_url <- tweets %>% filter(!is.na(url))
dim(tweets_url)
View(tweets_url)
tweets_url_small <- tweets_url %>%
dplyr::select(created_at, full_text, rex_rank, url) %>%
filter(!url %>% str_detect("twitter")) %>%
arrange(desc(rex_rank), url)
dim(tweets_url_small)
tweets_url_small %>% write.csv("/mnt/8tb_a/rwd_github_private/IntroToAppliedScience/git_ignore/temp.csv")
tweets_url_labeled <- read.csv("/mnt/8tb_a/rwd_github_private/IntroToAppliedScience/git_ignore/temp_labeled.csv") #%>% filter(keep %in% 1)
dim(tweets_url_labeled)
tweets_url_labeled_bk <- tweets_url_labeled
dim(tweets_url_labeled_bk)
tweets_url_labeled %>%
arrange(desc(rex_rank), url)  %>% filter(!duplicated(url)) %>%
filter(!url %>% str_detect("covid")) %>%
#dim() %>%
write.csv("/mnt/8tb_a/rwd_github_private/IntroToAppliedScience/git_ignore/temp_labeled.csv", row.names = FALSE)
tweets_url_labeled <- read.csv("/mnt/8tb_a/rwd_github_private/IntroToAppliedScience/git_ignore/temp_labeled.csv") #%>% filter(keep %in% 1)
dim(tweets_url_labeled)
for(url in tweets_url_labeled$url[3001:3100]){browseURL(url=url)}
for(url in tweets_url_labeled$url[3101:3200]){browseURL(url=url)}
for(url in tweets_url_labeled$url[3201:3300]){browseURL(url=url)}
for(url in tweets_url_labeled$url[3301:3400]){browseURL(url=url)}
for(url in tweets_url_labeled$url[3301:3400]){browseURL(url=url)}
Can transparency undermine peer review? A simulation model of scientist behavior under open peer review
Exploratory Data Analysis with R (2020) will overview tools and best practices in R to accomplish all the best steps of the data analysis process.
for(url in tweets_url_labeled$url[3401:3500]){browseURL(url=url)}
for(url in tweets_url_labeled$url[3501:3600]){browseURL(url=url)}
for(url in tweets_url_labeled$url[3601:3700]){browseURL(url=url)}
