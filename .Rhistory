toy_list = ['a','1',T,['red','green']]
toy_list
toy_list = ['a','1',True,['red','green']]
toy_list
import numpy as np
toy_vector_numeric = np.array([1,2,3,4,5])
toy_vector_character = np.array(['a','b','c','d','e'])
toy_list = ['a','1',True,['red','green']]
toy_dictionary = { 'a':1 , 'b':2}
toy_dictionary
toy_matrix <- matrix(1:9, 3, ,3)
toy_matrix <- matrix(1:9, 3,3)
toy_matrix <- matrix(1:9, nrow=3,ncol=3)
import numpy as np
toy_vector_numeric = np.array([1,2,3,4,5])
toy_vector_character = np.array(['a','b','c','d','e'])
toy_matrix <- matrix(1:9, nrow=3,ncol=3)
toy_list = ['a','1',True,['red','green']]
toy_dictionary = { 'a':1 , 'b':2, 'c':3}
import pandas as pd
toy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})
toy_matrix
toy_matrix
toy_vector_numeric[toy_vector_numeric>1]
toy_df |> subset(x>1)
toy_list
toy_list[1]
toy_list[2]
toy_list[2]=='a'
toy_list[1]=='a'
toy_list[0]=='a'
filtered = []
for element in toy_list:
if len(element)==1:
filter.append(element)
filtered
filtered = []
for element in toy_list:
if len(element)==1:
filtered.append(element)
filtered
toy_list
toy_list
len(T)
len('a')
len(1)
len(2)
len(3)
type(1)
type(1)
type('a')
type(toy_list[0])
type(toy_list[1])
type(toy_list[2])
type(toy_list[3])
type(toy_list[4])
filtered = []
for element in toy_list:
if type(element)==type(list):
filtered.append(element)
filtered
type(list)
type([])
filtered = []
for element in toy_list:
if type(element)==type([]):
filtered.append(element)
filtered
def fun(element):
return( type(element)==type([]) )
filter(fun, toy_list)
def fun(element):
return( type(element)==type([]) )
filtered = filter(fun, toy_list)
filtered
[filtered]
for s in filtered:
print(s)
def fun(element):
return( type(element)==type([]) )
filtered = filter(fun, toy_list)
type(filtered)
list(filtered)
filtered = filter(lamda element : type(element)==type([]), toy_list)
type(filtered)
list(filtered)
lamda element : type(element)==type([])
x = lamda element : type(element)==type([])
filtered = filter(  x, toy_list)
type(filtered)
list(filtered)
scores = [70, 60, 80, 90, 50]
filtered = filter(lambda score: score >= 70, scores)
print(list(filtered))
filtered = filter(  lamda element : type(element)==type([]) , toy_list)
type(filtered)
list(filtered)
scores = [70, 60, 80, 90, 50]
filtered = filter(lambda score: score >= 70, scores)
print(list(filtered))
[element for element in toy_list if type(element)==type([])]
{k:v for k,v in toy_dictionary.iteritems() if v>1}
{k:v for k,v in toy_dictionary.items() if v>1}
dict(filter(lambda e:e[0]>1, toy_dictionary.items() ) )
toy_dictionary['a']
toy_dictionary['a']>1
dict(filter(lambda e : e>1, toy_dictionary.items() ) )
# filter by key
dict(filter(lambda e : e[0]=='a', toy_dictionary.items() ) )
# filter by value
dict(filter(lambda e : e[1]>1, toy_dictionary.items() ) )
filtered = []
for element in toy_list:
if type(element)==type([]):
filtered.append(element)
filtered
def fun(element):
return( type(element)==type([]) )
filtered = filter(fun, toy_list)
type(filtered)
list(filtered)
filtered = filter(  lamda element : type(element)==type([]) , toy_list) #I don't know why this example fails but the next works
type(filtered)
list(filtered)
scores = [70, 60, 80, 90, 50]
filtered = filter(lambda score: score >= 70, scores)
print(list(filtered))
[element for element in toy_list if type(element)==type([])]
{k:v for k,v in toy_dictionary.items() if v>1}
# filter by key
dict(filter(lambda e : e[0]=='a', toy_dictionary.items() ) )
# filter by value
dict(filter(lambda e : e[1]>1, toy_dictionary.items() ) )
toy_vector_numeric[toy_vector_numeric>1]
import torch
filtered = []
for element in toy_list:
if type(element)==type([]):
filtered.append(element)
filtered
import numpy as np
toy_vector_numeric = np.array([1,2,3,4,5])
toy_vector_character = np.array(['a','b','c','d','e'])
toy_list = ['a','1',True,['red','green']]
toy_dictionary = { 'a':1 , 'b':2, 'c':3}
import pandas as pd
toy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})
import numpy as np
toy_vector_numeric = np.array([1,2,3,4,5])
toy_vector_character = np.array(['a','b','c','d','e'])
toy_list = ['a','1',True,['red','green']]
toy_dictionary = { 'a':1 , 'b':2, 'c':3}
import pandas as pd
toy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})
filtered = []
for element in toy_list:
if type(element)==type([]):
filtered.append(element)
filtered
def fun(element):
return( type(element)==type([]) )
filtered = filter(fun, toy_list)
type(filtered)
list(filtered)
filtered = filter(  lamda element : type(element)==type([]) , toy_list) #I don't know why this example fails but the next works
type(filtered)
list(filtered)
scores = [70, 60, 80, 90, 50]
filtered = filter(lambda score: score >= 70, scores)
print(list(filtered))
[element for element in toy_list if type(element)==type([])]
{k:v for k,v in toy_dictionary.items() if v>1}
# filter by key
dict(filter(lambda e : e[0]=='a', toy_dictionary.items() ) )
# filter by value
dict(filter(lambda e : e[1]>1, toy_dictionary.items() ) )
toy_vector_numeric[toy_vector_numeric>1]
import torch
toy_list
filtered = []
for element in toy_list:
if type(element)==type([]):
filtered.append(element)
filtered
def fun(element):
return( type(element)==type([]) )
filtered = filter(fun, toy_list)
type(filtered)
list(filtered)
filtered = filter(  lamda element : type(element)==type([]) , toy_list) #I don't know why this example fails but the next works
type(filtered)
list(filtered)
scores = [70, 60, 80, 90, 50]
filtered = filter(lambda score: score >= 70, scores)
print(list(filtered))
[element for element in toy_list if type(element)==type([])]
{k:v for k,v in toy_dictionary.items() if v>1}
# filter by key
dict(filter(lambda e : e[0]=='a', toy_dictionary.items() ) )
# filter by value
dict(filter(lambda e : e[1]>1, toy_dictionary.items() ) )
toy_vector_numeric[toy_vector_numeric>1]
import torch
#filtered = filter(  lamda element : type(element)==type([]) , toy_list) #I don't know why this example fails but the next works
#type(filtered)
#list(filtered)
scores = [70, 60, 80, 90, 50]
filtered = filter(lambda score: score >= 70, scores)
print(list(filtered))
filtered = []
for element in toy_list:
if type(element)==type([]):
filtered.append(element)
filtered
def fun(element):
return( type(element)==type([]) )
filtered = filter(fun, toy_list)
type(filtered)
list(filtered)
#filtered = filter(  lamda element : type(element)==type([]) , toy_list) #I don't know why this example fails but the next works
#type(filtered)
#list(filtered)
scores = [70, 60, 80, 90, 50]
filtered = filter(lambda score: score >= 70, scores)
print(list(filtered))
import numpy as np
toy_vector_numeric = np.array([1,2,3,4,5])
toy_vector_character = np.array(['a','b','c','d','e'])
toy_list = ['a','1',True,['red','green']]
toy_dictionary = { 'a':1 , 'b':2, 'c':3}
import pandas as pd
toy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})
toy_df.filter(x>1, axis=0)
toy_df.filter
toy_df
toy_df.names
toy_df.columns
toy_df[toy_df['x']>1]
df.query('x > 1')
toy_df.query('x > 1')
from datar import f
from datar.dplyr import mutate, filter, if_else
from datar.tibble import tibble
toy_df >> filter(x>1)
from datar import f
from datar.dplyr import mutate, filter, if_else
from datar.tibble import tibble
toy_df >> filter(x>1)
from datar import f
from datar.dplyr import mutate, filter, if_else
from datar.tibble import tibble
toy_df >> filter(toy_df.x>1)
from datar import f
from datar.dplyr import mutate, filter, if_else
from datar.tibble import tibble
toy_df >> filter(toy_df.x>1)
toy_df.x
toy_df.x>1
toy_df >> filter(toy_df.x>1)
import pandas
from dplython import (DplyFrame, X, diamonds, select, sift,
sample_n, sample_frac, head, arrange, mutate, group_by,
summarize, DelayFunction)
toy_df >> filter(toy_df.x>1)
toy_vector_numeric <- c(1,2,3,4,5)
toy_vector_character <- c('a','b','c','d','e')
toy_matrix <- matrix(1:9, nrow=3,ncol=3)
toy_list <- list('a','1',T,c('red','green'))
toy_df <- data.frame(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))
library(data.table)
toy_dt <- data.table(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))
library(tidyverse)
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con <- dbConnect(RPostgres::Postgres())
reticulate::repl_python()
#install.packages("duckdb")
#install.packages("duckdb")
library("DBI")
con_duckdb = dbConnect(duckdb::duckdb(), ":memory:")
install.packages("duckdb")
#install.packages("duckdb")
library("DBI")
con_duckdb = dbConnect(duckdb::duckdb(), ":memory:")
toy_vector_numeric <- c(1,2,3,4,5)
toy_vector_character <- c('a','b','c','d','e')
toy_matrix <- matrix(1:9, nrow=3,ncol=3)
toy_list <- list('a','1',T,c('red','green'))
toy_df <- data.frame(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))
library(data.table)
toy_dt <- data.table(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))
library(tidyverse)
reticulate::repl_python()
library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)
#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con_Postgres <- dbConnect(RPostgres::Postgres())
#install.packages("duckdb")
library("DBI")
con_duckdb = dbConnect(duckdb::duckdb(), ":memory:")
reticulate::repl_python()
TRUE
FALSE
T; F
logical(length = 0)
as.logical(x, ...)
TRUE
FALSE
T; F
logical(length = 0)
as.logical(1)
is.logical(1)
## non-zero values are TRUE
as.logical(c(pi,0))
if (length(letters)) cat("26 is TRUE\n")
## logical interpretation of particular strings
charvec <- c("FALSE", "F", "False", "false",    "fAlse", "0",
"TRUE",  "T", "True",  "true",     "tRue",  "1")
as.logical(charvec)
## factors are converted via their levels, so string conversion is used
as.logical(factor(charvec))
as.logical(factor(c(0,1)))  # "0" and "1" give NA
length(TRUE)
library(arrow)
boolean()
bool()
reticulate::repl_python()
reticulate::repl_python()
INSERT INTO bool_df (example_bool)
TRUE
FALSE
T; F
logical(length = 0)
as.logical(1)
is.logical(1)
## non-zero values are TRUE
as.logical(c(pi,0))
if (length(letters)) cat("26 is TRUE\n")
## logical interpretation of particular strings
charvec <- c("FALSE", "F", "False", "false",    "fAlse", "0",
"TRUE",  "T", "True",  "true",     "tRue",  "1")
as.logical(charvec)
## factors are converted via their levels, so string conversion is used
as.logical(factor(charvec))
as.logical(factor(c(0,1)))  # "0" and "1" give NA
length(TRUE)
library(arrow)
boolean()
bool()
reticulate::repl_python()
TRUE
FALSE
T; F
logical(length = 0)
as.logical(1)
is.logical(1)
## non-zero values are TRUE
as.logical(c(pi,0))
if (length(letters)) cat("26 is TRUE\n")
## logical interpretation of particular strings
charvec <- c("FALSE", "F", "False", "false",    "fAlse", "0",
"TRUE",  "T", "True",  "true",     "tRue",  "1")
as.logical(charvec)
## factors are converted via their levels, so string conversion is used
as.logical(factor(charvec))
as.logical(factor(c(0,1)))  # "0" and "1" give NA
length(TRUE)
library(arrow)
boolean()
bool()
reticulate::repl_python()
class(NULL)
is.null(NULL)
length(NULL)
is.null(list())     # FALSE (on purpose!)
is.null(pairlist()) # TRUE
is.null(integer(0)) # FALSE
is.null(logical(0)) # FALSE
as.null(list(a = 1, b = "c"))
is_empty(NULL)
is_empty(list())
is_empty(list(NULL))
NULL==NA
NULL==6
#Replace Nulls
1 %||% 2
NULL %||% 2
reticulate::repl_python()
