

<details>
<summary>Spin up toy data objects and databases </summary>

```{r, cache=F}
toy_vector_numeric <- c(1,2,3,4,5)
toy_vector_character <- c('a','b','c','d','e')
toy_matrix <- matrix(1:9, nrow=3,ncol=3)
toy_list <- list('a','1',T,c('red','green'))
toy_df <- data.frame(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))
library(data.table)
toy_dt <- data.table(id=c('unit1','unit2','unit3'), y=c(1,2,3), x= c(3,2,1))
library(tidyverse)
```


```{python, cache=F}
import numpy as np
toy_vector_numeric = np.array([1,2,3,4,5])
toy_vector_character = np.array(['a','b','c','d','e'])
toy_list = ['a','1',True,['red','green']]
toy_dictionary = { 'a':1 , 'b':2, 'c':3}
import pandas as pd
toy_df = pd.DataFrame(data={'id': ['unit1','unit2','unit3'], 'y': [1, 2, 3], 'x': [3, 2, 1]})
```



```{r, cache=F, echo=T, results='hide', message=FALSE, warning=FALSE}

library(DBI)
# Create an ephemeral in-memory RSQLite database
#con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
#dbListTables(con)
#dbWriteTable(con, "mtcars", mtcars)
#dbListTables(con)

#Configuration failed because libpq was not found. Try installing:
#* deb: libpq-dev libssl-dev (Debian, Ubuntu, etc)
#install.packages('RPostgres')
#remotes::install_github("r-dbi/RPostgres")
#Took forever because my file permissions were broken
#pg_lsclusters
require(RPostgres)
# Connect to the default postgres database
#I had to follow these instructions and create both a username and database that matched my ubuntu name
#https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart
con_Postgres <- dbConnect(RPostgres::Postgres())

```


```{sql, connection=con_Postgres, cache=F}

DROP TABLE IF EXISTS toy_df;

```

```{sql, connection=con_Postgres, cache=F}

CREATE TABLE IF NOT EXISTS toy_df (
  id varchar(5),
	y INTEGER,
	x INTEGER
);

```

```{sql, connection=con_Postgres, cache=F}

INSERT INTO toy_df (id, y, x)
VALUES
	('unit1',1,3),
	('unit2',2,2),
	('unit3',3,1);
	
```

```{r}
#install.packages("duckdb")
library("DBI")
con_duckdb = dbConnect(duckdb::duckdb(), ":memory:")
```

```{python}
#pip install duckdb==0.6.0
import duckdb
cursor_duckdb = duckdb.connect()
```

</details>
