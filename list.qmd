# List (Sequence) {.unnumbered}

AKA: Sequence, $a_n$ where n is the nth element, (1,2,3, ....)

Distinct from: Set

Measure of:

Description: A list is a collection of objects with a specific ordering and where the same object can appear more than once. Call each object an element, and its location its index or rank. An index is a natural number counting upward from the first element in the list. Whether counting begins at 0 or 1 depends on local conventions.

Formalization:

Algorithm:

Cites: [Wikipedia](https://en.wikipedia.org/wiki/Sequence) [Wikidata](https://www.wikidata.org/wiki/Q36161) [Encyclopedia Of Math](http://encyclopediaofmath.org/index.php?title=Sequence&oldid=48671) [Wolfram](https://mathworld.wolfram.com/Sequence.html)
[PlanetMath](https://planetmath.org/sequence)

::: panel-tabset

## R

Documentation:

[list: Lists -- Generic and Dotted Pairs](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/list)

Examples:

```{r}
example_list = list(1,2,3)
example_list
```

Sorting a list in R
[Sorting or Ordering Vectors](https://stat.ethz.ch/R-manual/R-devel/library/base/html/sort.html)

You can specify auto, shell, quick, or radix algorithms. Auto typically chooses [radix](https://en.wikipedia.org/wiki/Radix_sort). Radix applies to lexigraphical data, e.g. string and numbers. Radix has $O(nw)$ time where $n$ is the number of keys and $w$ is the length of the keys.

[Fast, stable and scalable true radix sorting](https://user2015.math.aau.dk/presentations/234.pdf)

*Radix because it's fast for R's use case

*It is [stable](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability). Stable sorts preserve the original order of two elements if they are equal by the sorting criteria.

```{r}
temp <- 5:1
sort(temp)
```


## Python

Documentation:

[More on Lists](https://docs.python.org/3/tutorial/datastructures.html)

Examples:

```{python}
example_list =  [1,2,3]
example_list
```

The 'range' function returns a generator for integers from between start to (stop-1). It'll do reverse as well but you have to pass a third decrement term. 
[The Python range() Function (Guide)](https://realpython.com/python-range/)
```{python}
[q for q in range(5,10)]
[q for q in range(10,5,-1)]

```

Python lists have to ways to sort, in palce with "sort" or returning a new list with "sorted".
[Sorting HOW TO](https://docs.python.org/3/howto/sorting.html)

Python uses [Timsort](https://en.wikipedia.org/wiki/Timsort) whose best case is $O(n)$ and worst and average case are both $O(nlog(n))$

```{python}
temp=[q for q in range(10,5,-1)]
temp
temp.sort()
temp

temp=[q for q in range(10,5,-1)]
sorted(temp)

```

## SQL

```{r}
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
```

```{sql, connection=con}
create table StatisticalNumbers(
 value int
)
```


```{sql, connection=con}
SELECT * FROM mtcars LIMIT 5;
```

:::